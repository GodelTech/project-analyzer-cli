# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  batch: true
  branches:
    include:
    - '*'

pr:
  branches:
    include:
    - '*'

schedules:
- cron: '0 0 1 * *'
  displayName: Monthly midnight build
  branches:
    include:
    - main

variables:
  ARTIFACT_DIRECTORY: lib
  COVERAGE_LOCATION: coverage
  PACKAGE_NAME: '@godeltech/project-analyzer-cli'
  FEED_ID: 19b42d8e-fc7a-4ddc-bbb6-f4a97000f284 # project-analyzer-cli
  PROJECT_ID: 19324bbd-9baf-4407-b86d-3e7f0d145399 # OpenSource

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: 'Build'
  variables:
    versionSuffix: ''
    currentPackageVersion: ''
  jobs:
    - job: Lib
      displayName: 'Build and test lib'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Install Node.js'
        - script:
            npm ci
          displayName: 'npm ci'

        - task: Npm@1
          displayName: 'Linting'
          inputs:
            command: 'custom'
            customCommand: 'run lint'

        - task: Npm@1
          displayName: 'Unit tests'
          inputs:
            command: 'custom'
            customCommand: 'run test:ci'

        - task: Npm@1
          displayName: 'Security audit'
          inputs:
            command: 'custom'
            customCommand: 'audit'

        - task: Bash@3
          displayName: Set NPM package patch number
          condition: ne(variables['Build.Reason'], 'Schedule')
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            GET_PACKAGE_ID_URL: 'https://feeds.dev.azure.com/godeltech/OpenSource/_apis/packaging/feeds/$(FEED_ID)/packages?protocolType=Npm&packageNameQuery=$(PACKAGE_NAME)'
          inputs:
            targetType: 'inline'
            script: |
              # Get package name and version from package.json file
              PACKAGE_VERSION=$(jq -r ".version" package.json)
              # Get all available versions for our package
              ALL_VERSIONS_URL=$(curl -s -X GET -u PATUSER:$SYSTEM_ACCESSTOKEN $GET_PACKAGE_ID_URL | jq -r '.value[0]._links.versions.href')
              ALL_VERSIONS=$(curl -s -X GET -u PATUSER:$SYSTEM_ACCESSTOKEN $ALL_VERSIONS_URL | jq -r '.value[].version')
              all=($ALL_VERSIONS)

              # If finds existing version, will increase patch version
              if [[ " ${all[@]} " =~ " ${PACKAGE_VERSION} " ]]; then
                echo Current package version found in existing packages. Iterating the patch number...
                # Get latest version currently published in the feed for our package
                LATEST_VERSION=$(curl -s -X GET -u PATUSER:$SYSTEM_ACCESSTOKEN $GET_PACKAGE_ID_URL| jq -r '.value[].versions[].version')
                IFS=. read MAJOR MINOR PATCH <<< "$LATEST_VERSION"
                PATCH_UPDATED=$((PATCH + 1))
                NEW_VERSION=$MAJOR.$MINOR.$PATCH_UPDATED
                NEW_BUILD_NUMBER=$MAJOR.$MINOR.$PATCH_UPDATED
                echo New package version: $NEW_VERSION
                # Update patch number variable
                echo "##vso[task.setvariable variable=patch;]$PATCH_UPDATED"
                # Update build number of the current build
                echo "##vso[build.updatebuildnumber]$NEW_BUILD_NUMBER"
                echo Replacing \"version\": \"$PACKAGE_VERSION\" with \"version\": \"$NEW_VERSION\" in local package.json
                sed -i 's/"version": "'${PACKAGE_VERSION}'"/"version": "'${NEW_VERSION}'"/' package.json
                echo New package.json version: $(jq -r ".version" package.json)
              fi

        - task: Npm@1
          displayName: 'Build'
          inputs:
            command: 'custom'
            customCommand: 'run build'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish Pipeline Artifact in $(ARTIFACT_DIRECTORY) directory'
          condition: ne(variables['Build.Reason'], 'Schedule')
          inputs:
            targetPath: '.'
            artifact: '$(ARTIFACT_DIRECTORY)'

        - task: PublishCodeCoverageResults@2
          displayName: 'Publish code coverage result'
          condition: succeededOrFailed()
          inputs:
            summaryFileLocation: '$(COVERAGE_LOCATION)/cobertura-coverage.xml'
            failIfCoverageEmpty: true

        - task: PublishTestResults@2
          displayName: 'Publish test result'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: JUnit
            testResultsFiles: "**/junit.xml"

- stage: Artifacts
  displayName: 'Artifacts'
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))
  jobs:
    - deployment: Publish
      displayName: 'Publish lib in artifacts'
      environment: 'Artifacts'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Npm@1
                displayName: 'Publish lib in artifacts'
                inputs:
                  command: 'publish'
                  workingDir: '$(Pipeline.Workspace)/$(ARTIFACT_DIRECTORY)'
                  publishRegistry: 'useFeed'
                  publishFeed: '$(PROJECT_ID)/$(FEED_ID)'

- stage: Npm
  displayName: 'Npm'
  dependsOn: Artifacts
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'Schedule'))
  jobs:
    - deployment: Publish
      displayName: 'Publish lib in npm registry'
      environment: 'npm'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Npm@1
                displayName: 'Publish lib in npm registry'
                inputs:
                  command: 'publish'
                  workingDir: '$(Pipeline.Workspace)/$(ARTIFACT_DIRECTORY)'
                  publishEndpoint: 'npm'
